generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  userId    Int
  main      Boolean  @default(false)
  cube      CubeType @default(N3)
  User      User     @relation(fields: [userId], references: [id])
  solves    Solve[]

  @@index([userId, cube, main])
}

model Solve {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  scramble     String
  time         Int
  description  String?       @db.VarChar
  sessionId    Int
  status       SolveStatus   @default(Ok)
  cfopSolve    CfopSolve?
  session      Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  twoLookSolve TwoLookSolve?

  @@index([sessionId])
}

model TwoLookSolve {
  id         Int      @id @default(autoincrement())
  cross      String?
  firstLayer String?
  edge1      String?
  edge2      String?
  edge3      String?
  edge4      String?
  oll1       String?
  oll2       String?
  pll1       String?
  pll2       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  solveId    Int      @unique
  solve      Solve    @relation(fields: [solveId], references: [id])

  @@index([solveId])
}

model TwoLookSolveDeleted {
  id             Int      @id @default(autoincrement())
  cross          String?
  firstLayer     String?
  edge1          String?
  edge2          String?
  edge3          String?
  edge4          String?
  oll1           String?
  oll2           String?
  pll1           String?
  pll2           String?
  createdAt      DateTime
  updatedAt      DateTime
  twoLookSolveId Int
  deleted        DateTime @default(now())
  solveId        Int
}

model CfopSolve {
  id        Int      @id @default(autoincrement())
  cross     String?
  f2l1      String?
  f2l2      String?
  f2l3      String?
  f2l4      String?
  oll       String?
  pll       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  solveId   Int      @unique
  solve     Solve    @relation(fields: [solveId], references: [id])

  @@index([solveId])
}

model CfopSolveDeleted {
  id          Int      @id @default(autoincrement())
  cross       String?
  f2l1        String?
  f2l2        String?
  f2l3        String?
  f2l4        String?
  oll         String?
  pll         String?
  createdAt   DateTime
  updatedAt   DateTime
  solveId     Int
  deleted     DateTime @default(now())
  cfopSolveId Int
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  email      String    @unique
  firstname  String
  lastname   String
  birthdate  DateTime
  gender     Gender?
  phone      String?   @db.VarChar(8)
  settingsId Int?
  authId     String?
  role       UserRole  @default(User)
  sessions   Session[]
  settings   Settings?
}

enum Gender {
  Male
  Female
}

model Settings {
  id                      Int                     @id @default(autoincrement())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  userId                  Int                     @unique
  zoom                    Int                     @default(100)
  font                    Font                    @default(Mono)
  backgroundImageOpacity  Int                     @default(25)
  timerSize               Int                     @default(72)
  scrambleSize            Int                     @default(24)
  backgroundImage         String?
  freezeTime              Int                     @default(0)
  useMouseTimer           Boolean                 @default(false)
  useWcaInspection        UseWcaInspection        @default(Never)
  voiceAlert              VoiceAlert              @default(None)
  voiceVolume             Int                     @default(100)
  enteringTimes           EnteringTimes           @default(Timer)
  unitWhenEnteringInteger UnitWhenEnteringInteger @default(Full)
  multiPhase              Int                     @default(1)
  timerUpdate             TimerUpdate             @default(Default)
  limitHeight             Boolean                 @default(false)
  monospaced              Boolean                 @default(false)
  alignArea               AlignArea               @default(Center)
  defaultScrambleSize     Boolean                 @default(true)
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SessionDeleted {
  id        Int      @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime
  name      String
  userId    Int
  main      Boolean  @default(false)
  deleted   DateTime @default(now())
  cube      CubeType @default(N3)
  sessionId Int
}

model SolveDeleted {
  id          Int         @id @default(autoincrement())
  solveId     Int
  createdAt   DateTime
  updatedAt   DateTime
  scramble    String
  time        Int
  description String?     @db.VarChar
  sessionId   Int
  deleted     DateTime    @default(now())
  status      SolveStatus @default(Ok)
}

model ServerStatus {
  id   Int     @id @default(autoincrement())
  open Boolean @default(true)
}

enum Font {
  Mono
  Montserat
  Arial
  Inter
}

enum UnitWhenEnteringInteger {
  Full
}

enum UseWcaInspection {
  Always
  ExceptBLD
  Never
}

enum VoiceAlert {
  None
  Male
  Female
  Aliya
  Mygmardorj
}

enum EnteringTimes {
  Timer
  Typing
  Stackmat
  Bluetooth
}

enum TimerUpdate {
  Default
  Update
  Inspection
  Seconds
  Point
  None
}

enum AlignArea {
  Center
  Left
  Right
}

enum SolveStatus {
  Ok
  Dnf
  Plus2
}

enum CubeType {
  N2
  N3
  N4
  N5
  N6
  N7
  Megaminx
  Pyraminx
  Clock
  Sq1
  Bld3
  Bld4
  Bld5
  Skewb
}

enum UserRole {
  User
  Admin
}
