generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  userId    Int?
  main      Boolean   @default(false)
  deleted   DateTime?
  cube      CubeType @default(N3)
  User      User?     @relation(fields: [userId], references: [id])
  solves    Solve[]
}

model Solve {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  scramble    String
  time        Int
  description String?     @db.VarChar
  sessionId   Int
  deleted     DateTime?
  status      SolveStatus @default(Ok)
  Session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, deleted])
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String        @unique
  firstname   String
  lastname    String
  birthdate   DateTime
  password    String
  role        String        @default("user")
  settingsId  Int?
  sessions    Session[]
  settings    Settings?
  userSession UserSession[]
}

model UserSession {
  id     Int    @id @default(autoincrement())
  token  String @unique @default(uuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Settings {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int               @unique
  displaySettings  DisplaySettings?
  scrambleSettings ScrambleSettings?
  user             User              @relation(fields: [userId], references: [id])
  timerSettings    TimerSettings?

  @@index([userId])
}

model DisplaySettings {
  id                     Int      @id @default(autoincrement())
  zoom                   Int      @default(100)
  font                   Font     @default(Mono)
  backgroundImageOpacity Int      @default(25)
  timerSize              Int      @default(25)
  backgroundImage        String?
  settingsId             Int      @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  settings               Settings @relation(fields: [settingsId], references: [id])
}

model TimerSettings {
  id                      Int                     @id @default(autoincrement())
  useMouseTimer           Boolean                 @default(false)
  useWcaInspection        UseWcaInspection        @default(Never)
  voiceAlert              VoiceAlert              @default(None)
  voiceVolume             Int                     @default(100)
  enteringTimes           EnteringTimes           @default(Timer)
  unitWhenEnteringInteger UnitWhenEnteringInteger @default(Full)
  multiPhase              Int                     @default(1)
  timerUpdate             TimerUpdate             @default(Point)
  spaceDown               SpaceDown               @default(Three)
  settingsId              Int                     @unique
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  settings                Settings                @relation(fields: [settingsId], references: [id])
}

model ScrambleSettings {
  id           Int       @id @default(autoincrement())
  limitHeight  Boolean   @default(false)
  scrambleSize Int       @default(25)
  monospaced   Boolean   @default(false)
  alignArea    AlignArea @default(Center)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  settingsId   Int       @unique
  settings     Settings  @relation(fields: [settingsId], references: [id])
}

enum Font {
  Mono
}

enum UnitWhenEnteringInteger {
  Full
}

enum UseWcaInspection {
  Always
  ExceptBLD
  Never
}

enum VoiceAlert {
  None
}

enum EnteringTimes {
  Timer
  Typing
}

enum TimerUpdate {
  Update
  Inspection
  Seconds
  Point
  None
}

enum SpaceDown {
  Zero
  Three
  Five
  One
}

enum AlignArea {
  Center
  Left
  Right
}

enum SolveStatus {
  Ok
  Dnf
  Plus2
}

enum CubeType {
  N2
  N3
  N4
  N5
  N6
  N7
  Megaminx
  Pyraminx
  Clock
  Sq1
  Bld3
  Bld4
  Bld5
  Skewb
}
