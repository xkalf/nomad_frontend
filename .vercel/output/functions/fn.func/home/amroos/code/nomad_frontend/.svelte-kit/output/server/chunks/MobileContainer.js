import { c as create_ssr_component, b as subscribe, d as add_attribute, e as escape, v as validate_component, f as each } from "./ssr.js";
import { a as SolvesList, M as Modal } from "./Solves2.js";
import { c as checkBestAverage, d as displayTime, g as getAvg } from "./timer-utils.js";
import { i as initialSolves, s as solves } from "./solves.js";
import { s as setSession, a as setCubeType, i as initialSessions, c as cubeType, b as session, d as sessions } from "./sessions.js";
import { c as cubeTypeMapper, b as cubeTypes } from "./types.js";
import { I as Icon } from "./Icon.js";
import { M as MobileNavbar } from "./MobileNavbar.js";
async function getSessionByCube(type) {
  const result = await (await fetch(`/api/session?cube=${type}&main=true`)).json();
  initialSessions(result.sessions);
  const id = result.sessions.find((i) => i.main === true)?.id;
  const currentSession = await (await fetch(`/api/session/${id}`)).json();
  setCubeType(type);
  setSession(currentSession.session);
  initialSolves(currentSession.session.solves);
}
async function getSessionById(id) {
  const currentSession = await (await fetch(`/api/session/${id}`)).json();
  if (!currentSession.session) {
    return getSessionByCube("N3");
  }
  setSession(currentSession.session);
  initialSolves(currentSession.session.solves);
  setCubeType(currentSession.session.cube);
  const result = await (await fetch(`/api/session?cube=${currentSession.session.cube}`)).json();
  initialSessions(result.sessions);
}
const Average = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $allSolves, $$unsubscribe_allSolves;
  $$unsubscribe_allSolves = subscribe(solves, (value2) => $allSolves = value2);
  let { label } = $$props;
  let { value = void 0 } = $$props;
  let { best = false } = $$props;
  let { mobile = false } = $$props;
  let { solves: solves$1 = void 0 } = $$props;
  let { count = void 0 } = $$props;
  let modal;
  let today;
  if ($$props.label === void 0 && $$bindings.label && label !== void 0)
    $$bindings.label(label);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.best === void 0 && $$bindings.best && best !== void 0)
    $$bindings.best(best);
  if ($$props.mobile === void 0 && $$bindings.mobile && mobile !== void 0)
    $$bindings.mobile(mobile);
  if ($$props.solves === void 0 && $$bindings.solves && solves$1 !== void 0)
    $$bindings.solves(solves$1);
  if ($$props.count === void 0 && $$bindings.count && count !== void 0)
    $$bindings.count(count);
  $$unsubscribe_allSolves();
  return `<button${add_attribute("class", `flex gap-2 rounded-xl bg-primary py-4 px-3 text-white md:px-4 ${best ? "w-full" : "w-1/2"} ${mobile ? "justify-evenly" : "justify-between"}`, 0)}><span>${escape(label)}</span> <span${add_attribute("class", `${count && checkBestAverage($allSolves, count)}`, 0)}>${solves$1 ? `${solves$1.length !== count ? `${escape(displayTime(0))}` : `${escape(getAvg(solves$1, count))}`}` : `${escape(value)}`}</span></button> ${solves$1 && solves$1.length === count ? `<dialog class="p-4 w-5/6 max-w-6xl font-sans rounded-xl md:px-0 xl:w-auto text-primary"${add_attribute("this", modal, 0)}><div class="mx-auto w-full md:w-3/5"><h2 class="text-2xl text-center md:text-3xl" data-svelte-h="svelte-13xs0s0">Avg status</h2> <p class="text-center">Generated By Nomad timer on ${escape(today)}</p> <div class="mx-auto mt-2 md:mt-6"><div class="flex items-center w-full text-lg text-center text-white rounded-xl bg-secondary"><div${add_attribute("class", `rounded-xl bg-primary p-4 text-sm md:w-1/5 md:text-base ${label.length > 5 ? "w-2/5" : "w-1/5"}`, 0)}>${escape(label)}</div> <div class="w-4/5 text-center">${escape(getAvg(solves$1, solves$1.length))}</div></div></div></div> ${validate_component(SolvesList, "SolvesList").$$render($$result, { solves: solves$1 }, {}, {})} <form method="dialog" class="flex gap-4 justify-center mt-2"><button class="py-2 px-4 text-xl text-white rounded-xl bg-primary" value="close" data-svelte-h="svelte-1q1ery4">Close</button> <button class="py-2 px-4 text-xl text-white rounded-xl bg-primary" data-svelte-h="svelte-uqosq">Copy</button></form></dialog>` : ``}`;
});
const Sessions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $cubeType, $$unsubscribe_cubeType;
  let $session, $$unsubscribe_session;
  let $solves, $$unsubscribe_solves;
  let $sessions, $$unsubscribe_sessions;
  $$unsubscribe_cubeType = subscribe(cubeType, (value) => $cubeType = value);
  $$unsubscribe_session = subscribe(session, (value) => $session = value);
  $$unsubscribe_solves = subscribe(solves, (value) => $solves = value);
  $$unsubscribe_sessions = subscribe(sessions, (value) => $sessions = value);
  let { changeCubeType } = $$props;
  let { mobile = false } = $$props;
  let isSessionCreate = false;
  let sessionName;
  let isOpen = false;
  async function createSession() {
    const response = await fetch("api/session", {
      method: "POST",
      body: JSON.stringify({ name: sessionName, cube: $cubeType })
    });
    const data = await response.json();
    if (data) {
      getSessionById(data.session.id);
      isSessionCreate = false;
    }
  }
  if ($$props.changeCubeType === void 0 && $$bindings.changeCubeType && changeCubeType !== void 0)
    $$bindings.changeCubeType(changeCubeType);
  if ($$props.mobile === void 0 && $$bindings.mobile && mobile !== void 0)
    $$bindings.mobile(mobile);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $sessions.map((i) => {
      if (i.id === $session?.id) {
        return { ...i, _count: { solves: $solves.length } };
      }
      return i;
    });
    $$rendered = `<div${add_attribute("class", `m-4 ${mobile ? "mx-auto w-full" : ""} rounded-xl bg-secondary py-2 px-4 text-white`, 0)}><div>${`<p class="my-2 ml-2">${escape($session?.name || "")} (${escape($solves.length)})</p>`}</div> <div class="flex items-center gap-1"><button>${validate_component(Icon, "Icon").$$render(
      $$result,
      {
        icon: "material-symbols:keyboard-arrow-up-rounded",
        color: "#fff",
        width: "25",
        height: "25",
        inline: true
      },
      {},
      {}
    )}</button>  <div${add_attribute("class", `relative flex flex-grow items-center justify-center rounded-xl bg-primary py-1 text-xl ${mobile ? "hidden" : "block"}`, 0)}><ul${add_attribute("class", `absolute left-0 bottom-0 z-0 flex w-full flex-col rounded-xl bg-primary pt-3 pb-10 ${"hidden"}`, 0)}>${each(cubeTypes, (type) => {
      return `<li class="w-full px-1 text-center hover:bg-secondary"><button class="w-full">${escape(cubeTypeMapper[type])}</button> </li>`;
    })}</ul> <button class="z-10 px-1">${escape(cubeTypeMapper[$cubeType])}</button></div>  <div class="z-10 flex flex-grow items-center justify-center rounded-xl bg-primary py-1 text-xl text-green-400"><button class="w-full" data-svelte-h="svelte-1fy12nq">+ Session</button></div></div></div> ${validate_component(Modal, "Modal").$$render(
      $$result,
      {
        okFunction: createSession,
        mode: "create",
        isOpen: isSessionCreate
      },
      {
        isOpen: ($$value) => {
          isSessionCreate = $$value;
          $$settled = false;
        }
      },
      {
        default: () => {
          return `<label for="sessionName" class="text-xl text-primary" data-svelte-h="svelte-1ieetfb">Session-ийн нэр</label> <input id="sessionName" type="text" class="mt-2 w-full rounded-lg bg-secondary p-2 pl-3 text-lg text-white"${add_attribute("value", sessionName, 0)}>`;
        }
      }
    )} ${validate_component(Modal, "Modal").$$render(
      $$result,
      {
        okFunction: async () => {
          return;
        },
        isOpen
      },
      {
        isOpen: ($$value) => {
          isOpen = $$value;
          $$settled = false;
        }
      },
      {
        default: () => {
          return `<p class="text-lg text-primary" data-svelte-h="svelte-1s74akq">Уг session-ийг устгах уу?</p>`;
        }
      }
    )}`;
  } while (!$$settled);
  $$unsubscribe_cubeType();
  $$unsubscribe_session();
  $$unsubscribe_solves();
  $$unsubscribe_sessions();
  return $$rendered;
});
const MobileContainer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<div class="relative flex h-screen flex-col bg-background">${slots.default ? slots.default({}) : ``} ${validate_component(MobileNavbar, "MobileNavbar").$$render($$result, {}, {}, {})}</div>`;
});
export {
  Average as A,
  MobileContainer as M,
  Sessions as S
};
